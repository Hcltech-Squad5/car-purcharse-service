package com.hcltech.car_purcharse_service.dao.service;

import com.hcltech.car_purcharse_service.model.Car;
import com.hcltech.car_purcharse_service.model.Seller;
import com.hcltech.car_purcharse_service.repository.CarRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class CarDaoServiceTest {

    @Mock
    private CarRepository carRepository;

    @InjectMocks
    private CarDaoService carDaoService;

    private Seller testSeller;
    private Car testCar1;
    private Car testCar2;

    private static int test(Car car) {
        int id = car.getSeller().getId();
        return id;
    }

    @BeforeEach
    void setUp() {
        testSeller = new Seller(1, "Honda", "9832415264l","seller@example.com");

        testCar1 = new Car(1, "Toyota", "Camry", 2023, 30000.0, true, testSeller);
        testCar2 = new Car(2, "Honda", "Civic", 2022, 25000.0, false, testSeller); // Not available for testing
    }

    @Test
    @DisplayName("Should retrieve all cars successfully")
    void getAll() {
        List<Car> cars = Arrays.asList(testCar1, testCar2);
        when(carRepository.findAll()).thenReturn(cars);

        List<Car> result = carDaoService.getAll();

        assertThat(result).isNotNull();
        assertThat(result).hasSize(2);
        assertThat(result).containsExactlyInAnyOrder(testCar1, testCar2);

        verify(carRepository, times(1)).findAll();
    }

    @Test
    @DisplayName("Should retrieve a car by ID successfully")
    void getOneById() {
        when(carRepository.findById(testCar1.getId())).thenReturn(Optional.of(testCar1));

        Car result = carDaoService.getOneById(testCar1.getId());

        assertThat(result).isNotNull();
        assertThat(result.getId()).isEqualTo(testCar1.getId());
        assertThat(result.getMake()).isEqualTo(testCar1.getMake());
        assertThat(result.getSeller()).isEqualTo(testCar1.getSeller());

        verify(carRepository, times(1)).findById(testCar1.getId());
    }

    @Test
    @DisplayName("Should create a car entity successfully")
    void create() {
        when(carRepository.save(any(Car.class))).thenAnswer(invocation -> {
            Car carToSave = invocation.getArgument(0);
            if (carToSave.getId() == null) {
                carToSave.setId(3); // Simulate a new ID generated by DB
            }
            return carToSave;
        });

        Car newCar = new Car(null, "Ford", "Focus", 2024, 35000.0, true, testSeller);
        Car createdCar = carDaoService.create(newCar);

        assertThat(createdCar).isNotNull();
        assertThat(createdCar.getId()).isNotNull(); // Check if ID was generated
        assertThat(createdCar.getMake()).isEqualTo("Ford");
        assertThat(createdCar.getSeller()).isEqualTo(testSeller);

        verify(carRepository, times(1)).save(any(Car.class));
    }

    @Test
    @DisplayName("Should update a car entity successfully")
    void update() {
        when(carRepository.save(any(Car.class))).thenAnswer(invocation -> invocation.getArgument(0));

        testCar1.setPrice(32000.0); // Modify a property
        Car updatedCar = carDaoService.update(testCar1);

        assertThat(updatedCar).isNotNull();
        assertThat(updatedCar.getId()).isEqualTo(testCar1.getId());
        assertThat(updatedCar.getPrice()).isEqualTo(32000.0);

        verify(carRepository, times(1)).save(any(Car.class));
    }

    @Test
    @DisplayName("Should delete a car by ID successfully")
    void delete() {
        doNothing().when(carRepository).deleteById(testCar1.getId());

        String result = carDaoService.delete(testCar1.getId());

        assertThat(result).isEqualTo("Delete Successful");

        verify(carRepository, times(1)).deleteById(testCar1.getId());
    }

    @Test
    @DisplayName("Should retrieve only available cars successfully")
    void getAvailableCars() {
        when(carRepository.findByIsAvailableTrue()).thenReturn(Arrays.asList(testCar1)); // Only testCar1 is available

        List<Car> result = carDaoService.getAvailableCars();

        assertThat(result).isNotNull();
        assertThat(result).hasSize(1);
        assertThat(result.get(0).getIsAvailable()).isTrue();
        assertThat(result).containsExactly(testCar1);

        verify(carRepository, times(1)).findByIsAvailableTrue();
    }

    @Test
    @DisplayName("Should retrieve cars by seller ID successfully")
    void getCarsBySeller() {
        List<Car> sellerCars = Arrays.asList(testCar1, testCar2); // Both belong to testSeller
        when(carRepository.findAllBySellerId(testSeller.getId())).thenReturn(sellerCars);

        List<Car> result = carDaoService.getCarsBySeller(testSeller.getId());

        assertThat(result).isNotNull();
        assertThat(result).hasSize(2);
        assertThat(result).containsExactlyInAnyOrder(testCar1, testCar2);
        verify(carRepository, times(1)).findAllBySellerId(testSeller.getId());
    }

}